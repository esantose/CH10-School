import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, map, Observable, throwError } from 'rxjs';
import { SesionService } from '@root/services/sesion.service';
import { Sesion } from 'src/app/models/sesion';
import { IUser } from 'src/app/models/user';
import { RepositionScrollStrategy } from '@angular/cdk/overlay';

@Injectable({
	providedIn: 'root',
})
export class AuthService {
	apiUrl: string = 'http://localhost:3000/users';

	rslt1: boolean = false;
	private userExists: boolean = false;

	constructor(private httpClient: HttpClient, private sesion: SesionService) {}

	login(user: IUser) {
		let sesion: Sesion = {
			sesionActiva: true,
			currentUser: user,
		};

		const urlEmail = `${this.apiUrl}?email=${user.email}`;
		// let rslt: boolean = false;
		// this.httpClient.get(urlEmail).pipe(
		// 	map((response: any) => {
		// 		console.log('response..', response);
		// 		return response;
		// 	}),
		// 	catchError((err, caught) => {
		// 		console.error(err);
		// 		throw err;
		// 	})
		// );
		this.doesUserExist(user.email).subscribe(x => {
			console.log('User exists ', x);
			this.userExists = x;
		});
		console.log('this.userExists ', this.userExists);
		if (this.userExists) {
			console.log('Session will be updated');
			this.sesion.crearSesion(sesion);
		} else {
			console.log('User must be registered');
		}

		// const tmp = this.isUserRegisted(user.email);
		// console.log('isUserRegisted: ', tmp);
		// if (this.isUserRegisted(user.email)) {
		// 	console.log('Session will be updated');
		// 	this.sesion.crearSesion(sesion);
		// } else {
		// 	console.log('User must be registered');
		// }

		// TODO: User Validation is pending

		// this.sesion.crearSesion(sesion);
		// const tmp1 = this.getUserInfo(user.email);
		// console.log('getUsertmp', tmp1);
	}

	private doesUserExist(email: string): Observable<boolean> {
		const urlEmail = `${this.apiUrl}?email=${email}`;
		return this.httpClient.get(urlEmail).pipe(
			map((data: any) => {
				console.log('myData: ', data.length);
				return data.length <= 0 ? false : true;
			})
		);
	}

	getUserInfo(email: any) {
		console.log('Loading...', email);

		this.getUserByEmail(email).subscribe(
			(user: IUser) => {
				console.log(user);
			},
			(error: any) => {
				console.log(error);
			}
		);
	}

	isUserRegisted(email: any): boolean {
		let rslt: boolean = false;
		const urlEmail = `${this.apiUrl}?email=${email}`;
		console.log('urlEmail: ', urlEmail);
		this.httpClient.get(urlEmail).subscribe({
			next: (res: any) => {
				console.log('res.length: ', res.length);
				rslt = res.length <= 0 ? false : true;
				console.log('rslt: ', rslt);
			},
		});
		return rslt;
	}

	getUserByEmail(email: any): Observable<any> {
		// const urlEmail = `${this.apiUrl}/${email}`;
		const urlEmail = `${this.apiUrl}?email=${email}`;
		return this.httpClient.get(urlEmail).pipe(catchError(this.handleError));
		// return this.httpClient.get(this.apiUrl + '/' + data, data).pipe(catchError(this.handleError));
	}

	createUser(data: any): Observable<any> {
		console.log('createUser', data);
		return this.httpClient.post(this.apiUrl, data).pipe(catchError(this.handleError));
	}

	// Handle API errors
	handleError(error: HttpErrorResponse) {
		if (error.error instanceof ErrorEvent) {
			console.error('An error occurred:', error.error.message);
		} else {
			console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);
		}
		return throwError('Something bad happened; please try again later.');
	}
}
